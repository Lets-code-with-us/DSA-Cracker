Explanation:-Maximum Product Subarray

Its brute force approach is use 2 loops and take subarray and multiply them
but we use optimal approach

************KADANE'S ALGORITHM**********

Approach :-Traverse array from right to left and left to right store maximum multiplication of elements in 
a variable and return maximum multiplication


***Approach of Left Side traversing***

*Traverse array from left to right first in "ans" store ans*=nums[i]
*In "maxi" store max(ans,maxi)
*If ans not changed means remain 0 so do ans=1


***Approach of Right Side traversing***

*First toggle ans=1 (because old value store in it)
*Traverse array from right to left first in "ans" store ans*=nums[i]
*In "maxi" store max(ans,maxi)
*If ans not changed means remain 0 so do ans=1
*Atlast return the "maxi"