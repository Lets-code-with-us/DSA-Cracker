class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

    if (nums.length < 3)//if the nums array length is less than 3 
      return new ArrayList<>();//then return a new ArrayList

    List<List<Integer>> ans = new ArrayList<>();//we create a new ArrayList

    Arrays.sort(nums);//we sort the nums array

    for (int i = 0; i + 2 < nums.length; ++i) {//here we traverse the nums array
      if (i > 0 && nums[i] == nums[i - 1])//if i is greater than 0 and elements in nums array is equal to its previous element is nums array then
        continue;//continue checking the nums array elements
      int l = i + 1;//we assign i+1 to l 
      int r = nums.length - 1;// we assign length of nums array -1 to r
      while (l < r) {//as long as l is less than r then
        final int sum = nums[i] + nums[l] + nums[r];//the final value of sum is addition of i th,l th and r th index element of nums array
        if (sum == 0) {//if sum value is 0 then
          ans.add(Arrays.asList(nums[i], nums[l++], nums[r--]));//insert i th, l+1 th and r-1 th element to the ans array list
          while (l < r && nums[l] == nums[l - 1])//as long as l is less than r and l th index element is equal to its previous element
            ++l;//then l is incremented by 1
          while (l < r && nums[r] == nums[r + 1])// as long as l is less than r and r th element of nums array is equal to its previous element
            --r;//then r is decremented by 1
        } else if (sum < 0) {//if sum is less than 0 then
          ++l;//l is incremented by 1
        } else {
          --r;//or else then r is decremented by 1
        }
      }
    }

    return ans;//we return ans arraylist
  }
}